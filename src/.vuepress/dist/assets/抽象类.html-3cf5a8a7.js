const t=JSON.parse('{"key":"v-b9b07e24","path":"/learning-notes/java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E9%AB%98%E7%BA%A7)/%E6%8A%BD%E8%B1%A1%E7%B1%BB.html","title":"抽象类（abstract）","lang":"zh-CN","frontmatter":{"order":6,"description":"抽象类（abstract） 基本介绍 当父类的某些方法，需要声明，但是又不确定如何实现时，可以将其声明为抽象方法，那么这个类就是抽象类 用 abstract 关键字来修饰一个类时,这个类就叫抽象类： 访问修饰符 abstract 类名(); 用 abstract 关键字来修饰一个方法时,这个方法就是抽象方法访问修饰符 abstract 返回类型 方法名(参数列表): //没有方法体 抽象类的价值更多作用是在于设计，是设计者设计好后，让子类继承并实现抽象类 抽象类，是考官比较爱问的知识点，在框架和设计模式使用较多","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/spoony-z/learning-notes/java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E9%AB%98%E7%BA%A7)/%E6%8A%BD%E8%B1%A1%E7%B1%BB.html"}],["meta",{"property":"og:site_name","content":"SOBER"}],["meta",{"property":"og:title","content":"抽象类（abstract）"}],["meta",{"property":"og:description","content":"抽象类（abstract） 基本介绍 当父类的某些方法，需要声明，但是又不确定如何实现时，可以将其声明为抽象方法，那么这个类就是抽象类 用 abstract 关键字来修饰一个类时,这个类就叫抽象类： 访问修饰符 abstract 类名(); 用 abstract 关键字来修饰一个方法时,这个方法就是抽象方法访问修饰符 abstract 返回类型 方法名(参数列表): //没有方法体 抽象类的价值更多作用是在于设计，是设计者设计好后，让子类继承并实现抽象类 抽象类，是考官比较爱问的知识点，在框架和设计模式使用较多"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-09T17:00:42.000Z"}],["meta",{"property":"article:author","content":"SOBER"}],["meta",{"property":"article:modified_time","content":"2023-06-09T17:00:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"抽象类（abstract）\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-06-09T17:00:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"SOBER\\",\\"url\\":\\"https://github.com/spoony-Z\\"}]}"]]},"headers":[{"level":2,"title":"基本介绍","slug":"基本介绍","link":"#基本介绍","children":[]},{"level":2,"title":"演示","slug":"演示","link":"#演示","children":[]},{"level":2,"title":"注意细节","slug":"注意细节","link":"#注意细节","children":[]},{"level":2,"title":"练习题","slug":"练习题","link":"#练习题","children":[]},{"level":2,"title":"最佳实践【模板设计模式】","slug":"最佳实践【模板设计模式】","link":"#最佳实践【模板设计模式】","children":[]}],"git":{"createdTime":1684429757000,"updatedTime":1686330042000,"contributors":[{"name":"杨胜军","email":"shenjun_y@yeah.net","commits":3}]},"readingTime":{"minutes":3.45,"words":1036},"filePathRelative":"learning-notes/java/面向对象(高级)/抽象类.md","localizedDate":"2023年5月19日","excerpt":"<h1> 抽象类（abstract）</h1>\\n<h2> 基本介绍</h2>\\n<blockquote>\\n<p>当父类的某些方法，需要声明，但是又不确定如何实现时，可以将其声明为抽象方法，那么这个类就是抽象类</p>\\n</blockquote>\\n<ol>\\n<li>用 <strong>abstract</strong> 关键字来修饰一个类时,这个类就叫抽象类： 访问修饰符  <strong>abstract</strong>  类名();</li>\\n<li>用 <strong>abstract</strong> 关键字来修饰一个方法时,这个方法就是抽象方法访问修饰符 <strong>abstract</strong> 返回类型 方法名(参数列表): //没有方法体</li>\\n<li>抽象类的价值更多作用是在于设计，是设计者设计好后，让子类继承并实现抽象类</li>\\n<li>抽象类，是考官比较爱问的知识点，在框架和设计模式使用较多</li>\\n</ol>","autoDesc":true}');export{t as data};
