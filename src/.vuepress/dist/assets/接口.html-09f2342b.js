const e=JSON.parse('{"key":"v-9e89e5ac","path":"/learning-notes/java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E9%AB%98%E7%BA%A7)/%E6%8E%A5%E5%8F%A3.html","title":"接口","lang":"zh-CN","frontmatter":{"order":7,"description":"接口 基本介绍 接口就是给出一些没有实现的方法,封装到一起,到某个类要使用的时候,在根据具体情况把这些方法写出来 语法 interface 接口名 { 属性 方法（1.抽象方法，2.默认实现方法，3.静态方法） } class 类名 implements 接口 { 自己属性 自己方法 必须实现的接口的抽象方法 }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/spoony-z/learning-notes/java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E9%AB%98%E7%BA%A7)/%E6%8E%A5%E5%8F%A3.html"}],["meta",{"property":"og:site_name","content":"SOBER"}],["meta",{"property":"og:title","content":"接口"}],["meta",{"property":"og:description","content":"接口 基本介绍 接口就是给出一些没有实现的方法,封装到一起,到某个类要使用的时候,在根据具体情况把这些方法写出来 语法 interface 接口名 { 属性 方法（1.抽象方法，2.默认实现方法，3.静态方法） } class 类名 implements 接口 { 自己属性 自己方法 必须实现的接口的抽象方法 }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-10T17:31:32.000Z"}],["meta",{"property":"article:author","content":"SOBER"}],["meta",{"property":"article:modified_time","content":"2023-06-10T17:31:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"接口\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-06-10T17:31:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"SOBER\\",\\"url\\":\\"https://github.com/spoony-Z\\"}]}"]]},"headers":[{"level":2,"title":"基本介绍","slug":"基本介绍","link":"#基本介绍","children":[]},{"level":2,"title":"语法","slug":"语法","link":"#语法","children":[]},{"level":2,"title":"演示","slug":"演示","link":"#演示","children":[]},{"level":2,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[]},{"level":2,"title":"接口 和 继承类","slug":"接口-和-继承类","link":"#接口-和-继承类","children":[{"level":3,"title":"解决问题不同","slug":"解决问题不同","link":"#解决问题不同","children":[]},{"level":3,"title":"接口比继承更加灵活","slug":"接口比继承更加灵活","link":"#接口比继承更加灵活","children":[]}]},{"level":2,"title":"接口的多态特性","slug":"接口的多态特性","link":"#接口的多态特性","children":[]}],"git":{"createdTime":1684429757000,"updatedTime":1686418292000,"contributors":[{"name":"杨胜军","email":"shenjun_y@yeah.net","commits":5}]},"readingTime":{"minutes":2.95,"words":884},"filePathRelative":"learning-notes/java/面向对象(高级)/接口.md","localizedDate":"2023年5月19日","excerpt":"<h1> 接口</h1>\\n<h2> 基本介绍</h2>\\n<p>接口就是给出一些没有实现的方法,封装到一起,到某个类要使用的时候,在根据具体情况把这些方法写出来</p>\\n<h2> 语法</h2>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"shiki one-dark-pro\\" style=\\"background-color: #282c34\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color: #C678DD\\">interface</span><span style=\\"color: #E06C75\\"> </span><span style=\\"color: #E5C07B\\">接口名</span><span style=\\"color: #E06C75\\"> </span><span style=\\"color: #ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E06C75\\">    属性</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E06C75\\">    方法（1</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">抽象方法，2</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">默认实现方法，3</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">静态方法）</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">class</span><span style=\\"color: #E06C75\\"> </span><span style=\\"color: #E5C07B\\">类名</span><span style=\\"color: #E06C75\\"> </span><span style=\\"color: #C678DD\\">implements</span><span style=\\"color: #E06C75\\"> 接口 </span><span style=\\"color: #ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E06C75\\">    自己属性</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E06C75\\">    自己方法</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E06C75\\">    必须实现的接口的抽象方法</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
