import{_ as a,X as i,Y as e,$ as l}from"./framework-2185e866.js";const s="/spoony-z/assets/8-7b29c26a.png",o="/spoony-z/assets/9-3864592b.png",n="/spoony-z/assets/10-9c2b4df6.png",r="/spoony-z/assets/11-5b6949e2.png",t="/spoony-z/assets/12-7cb34602.png",d="/spoony-z/assets/13-e4fe4ab8.png",c="/spoony-z/assets/14-3c8e99ce.png",u={},h=l('<h1 id="断点调试" tabindex="-1"><a class="header-anchor" href="#断点调试" aria-hidden="true">#</a> 断点调试</h1><h2 id="实际开发" tabindex="-1"><a class="header-anchor" href="#实际开发" aria-hidden="true">#</a> 实际开发</h2><blockquote><ul><li>在开发中，新手程序员在查找错误时,这时老程序员就会温馨提示，可以用断点调试步一步的看源码执行的过程，从而发现错误所在。</li><li>重要提示: 在断点调试 过程中，是运行状态，是以对象的 运行类型来执行的</li></ul></blockquote><h2 id="断点调试介绍" tabindex="-1"><a class="header-anchor" href="#断点调试介绍" aria-hidden="true">#</a> 断点调试介绍</h2><ul><li>断点调试是指在程序的某一行设置一个断点，调试时，程序运行到这一行就会停住</li><li>调试过程中可以看各个变量当前的值出错的话，调然后你可以一步一步往下调试，试到出错的代码行即显示错误，停下。进行分析从而找到这个Bug</li><li>断点调试是程序员必须掌握的技能</li><li>断点调试也能帮助我们查看iava底层源代码的执行过程，提高程序员的Java水平</li></ul><h2 id="断点调试快捷键" tabindex="-1"><a class="header-anchor" href="#断点调试快捷键" aria-hidden="true">#</a> 断点调试快捷键</h2><ul><li>F7(跳入)</li><li>F8(跳过)</li><li>shift+F8(跳出)</li><li>F9(resume,执行到下一个断点)</li></ul><h2 id="idea-dubug-如何进入-jdk源码" tabindex="-1"><a class="header-anchor" href="#idea-dubug-如何进入-jdk源码" aria-hidden="true">#</a> idea dubug 如何进入 Jdk源码</h2><ol><li>使用快捷键：alt + shift + F7</li><li>配置：Setting --&gt; Build, Execution, Deployment --&gt; Debugg --&gt; Stepping</li><li>把 Do not step into the classes 中的 ajva.*，javax.*取消勾选，其他的随意</li></ol><h2 id="零钱通案例" tabindex="-1"><a class="header-anchor" href="#零钱通案例" aria-hidden="true">#</a> 零钱通案例</h2><h3 id="需求" tabindex="-1"><a class="header-anchor" href="#需求" aria-hidden="true">#</a> 需求</h3><blockquote><p>使用Java 开发 零钱通项目，可以完成收益入账，消费，查看明细，退出系统等功能</p></blockquote><h3 id="项目界面" tabindex="-1"><a class="header-anchor" href="#项目界面" aria-hidden="true">#</a> 项目界面</h3><figure><img src="'+s+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现" aria-hidden="true">#</a> 代码实现</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="作业" tabindex="-1"><a class="header-anchor" href="#作业" aria-hidden="true">#</a> 作业</h2><h3 id="作业1" tabindex="-1"><a class="header-anchor" href="#作业1" aria-hidden="true">#</a> 作业1</h3><blockquote><p>定义一个Person类{ name, age, job }，初始化Person 对象数组，有3个person对象，并按照 age 从 大到 小进行排序, 提示，使用冒泡排序</p></blockquote><ul><li>代码实现</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="作业2" tabindex="-1"><a class="header-anchor" href="#作业2" aria-hidden="true">#</a> 作业2</h3><blockquote><p>写出四种访问修饰符和各自的访问权限</p></blockquote><ul><li>代码实现</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="作业3" tabindex="-1"><a class="header-anchor" href="#作业3" aria-hidden="true">#</a> 作业3</h3><blockquote><p>编写老师类</p><ul><li><ol><li>要求有属性: 姓名 name 年龄 age 职称 post 基本工资 salary</li></ol></li><li><ol start="2"><li>编写业务方法，introduce()，实现输出一个教师的信息。</li></ol></li><li><ol start="3"><li>编写教师类的三个子类: 教授类(Professor )、副教授类、讲师类。工资级别分别为: 教授为1.3、副教授为1.2、讲师类1.1。在三个子类里面都重写父类的introduce() 方法</li></ol></li><li><ol start="4"><li>定义并初始化一个老师对象，调用业务方法，实现对象基本信息的后台打印.</li></ol></li></ul></blockquote><ul><li>代码实现</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="作业4" tabindex="-1"><a class="header-anchor" href="#作业4" aria-hidden="true">#</a> 作业4</h3><blockquote><p>通过继承实现员工工资核算打印功能</p><ul><li>父类：员工类</li><li>子类：部门经理类、普通员工类</li><li><ol><li>部门经理工资 = 1000 + 单日工资 * 天数 * 等级(1.2)</li></ol></li><li><ol start="2"><li>普通员工工资 = 单日工资 * 天数 * 等级(1.0);</li></ol></li><li><ol start="3"><li>员工属性: 姓名，单日工资，工作天数</li></ol></li><li><ol start="4"><li>员工方法(打印工资)</li></ol></li><li><ol start="5"><li>普遍员工及部门经理都是员工子类，需要重写打印工资方法</li></ol></li><li><ol start="6"><li>定义并初始化普通员工对象，调用打印工资方法输入工资，定义并初始化部门经理对象，调用打印工资方法输入工资</li></ol></li></ul></blockquote><ul><li>代码实现</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="作业5" tabindex="-1"><a class="header-anchor" href="#作业5" aria-hidden="true">#</a> 作业5</h3><blockquote><p>设计父类一员工类。子类: 工人类(Worker)，农民类(Peasant)，教师类(Teacher)，科学家类(Scientist)，服务生类(Waiter)</p><ul><li><ol><li>其中工人,农民,服务生只有基本工资</li></ol></li><li><ol start="2"><li>教师除基本工资外，还有课酬(元/天)</li></ol></li><li><ol start="3"><li>科学家除基本工资外,还有年终奖</li></ol></li><li><ol start="4"><li>编写一个测试类，将各种类型的员工的全年工资打印出来</li></ol></li></ul></blockquote><h2 id="房屋出租系统" tabindex="-1"><a class="header-anchor" href="#房屋出租系统" aria-hidden="true">#</a> 房屋出租系统</h2><h3 id="需求-1" tabindex="-1"><a class="header-anchor" href="#需求-1" aria-hidden="true">#</a> 需求</h3><blockquote><p>能够实现对房屋信息的添加、修改和删除(用数组实现)，并能够打印房屋明细表。</p><ul><li>示例图</li></ul></blockquote><blockquote><figure><img src="`+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></blockquote><blockquote><ul><li>主菜单示例图</li></ul></blockquote><blockquote><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></blockquote><blockquote><ul><li>删除房源示例图</li></ul></blockquote><blockquote><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></blockquote><blockquote><ul><li>修改房源示例图</li></ul></blockquote><blockquote><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></blockquote><blockquote><ul><li>房屋列表示例图</li></ul></blockquote><blockquote><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></blockquote><blockquote><ul><li>退出系统示例图</li></ul></blockquote><blockquote><figure><img src="'+c+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></blockquote><h3 id="代码实现-1" tabindex="-1"><a class="header-anchor" href="#代码实现-1" aria-hidden="true">#</a> 代码实现</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,51),b=[h];function p(g,k){return i(),e("div",null,b)}const v=a(u,[["render",p],["__file","断点调试.html.vue"]]);export{v as default};
