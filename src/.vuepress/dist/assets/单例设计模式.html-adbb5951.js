const e=JSON.parse('{"key":"v-8a1c3d60","path":"/learning-notes/java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E9%AB%98%E7%BA%A7)/%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html","title":"单例设计模式","lang":"zh-CN","frontmatter":{"order":4,"description":"单例设计模式 什么是设计模式 静态方法和属性的经典使用 设计模式是在大量的实践中总结和理论化之后优选的代码结构、编程风格以及解决问题的思考方式 。设计模式就像是经典的棋谱，不同的棋局，我们用不同的棋谱，免去我们自己再思考和摸索 什么是单例设计模式 所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得其对象实例的方法 单例模式有两种方式: 饿汉式 懒汉式","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/spoony-z/learning-notes/java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E9%AB%98%E7%BA%A7)/%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"SOBER"}],["meta",{"property":"og:title","content":"单例设计模式"}],["meta",{"property":"og:description","content":"单例设计模式 什么是设计模式 静态方法和属性的经典使用 设计模式是在大量的实践中总结和理论化之后优选的代码结构、编程风格以及解决问题的思考方式 。设计模式就像是经典的棋谱，不同的棋局，我们用不同的棋谱，免去我们自己再思考和摸索 什么是单例设计模式 所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得其对象实例的方法 单例模式有两种方式: 饿汉式 懒汉式"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-08T19:22:38.000Z"}],["meta",{"property":"article:author","content":"SOBER"}],["meta",{"property":"article:modified_time","content":"2023-06-08T19:22:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"单例设计模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-06-08T19:22:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"SOBER\\",\\"url\\":\\"https://github.com/spoony-Z\\"}]}"]]},"headers":[{"level":2,"title":"什么是设计模式","slug":"什么是设计模式","link":"#什么是设计模式","children":[]},{"level":2,"title":"什么是单例设计模式","slug":"什么是单例设计模式","link":"#什么是单例设计模式","children":[]},{"level":2,"title":"单例模式应用实例","slug":"单例模式应用实例","link":"#单例模式应用实例","children":[]},{"level":2,"title":"饿汉式和懒汉式的区别","slug":"饿汉式和懒汉式的区别","link":"#饿汉式和懒汉式的区别","children":[]}],"git":{"createdTime":1684429757000,"updatedTime":1686252158000,"contributors":[{"name":"杨胜军","email":"shenjun_y@yeah.net","commits":2}]},"readingTime":{"minutes":2.16,"words":648},"filePathRelative":"learning-notes/java/面向对象(高级)/单例设计模式.md","localizedDate":"2023年5月19日","excerpt":"<h1> 单例设计模式</h1>\\n<h2> 什么是设计模式</h2>\\n<ol>\\n<li>静态方法和属性的经典使用</li>\\n<li>设计模式是在大量的实践中总结和理论化之后优选的代码结构、编程风格以及解决问题的思考方式 。设计模式就像是经典的棋谱，不同的棋局，我们用不同的棋谱，免去我们自己再思考和摸索</li>\\n</ol>\\n<h2> 什么是单例设计模式</h2>\\n<ol>\\n<li>所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得其对象实例的方法</li>\\n<li>单例模式有两种方式:\\n<ul>\\n<li>饿汉式</li>\\n<li>懒汉式</li>\\n</ul>\\n</li>\\n</ol>","autoDesc":true}');export{e as data};
