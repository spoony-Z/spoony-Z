import{_ as s,X as a,Y as n,$ as l}from"./framework-2185e866.js";const e={},o=l(`<h1 id="类变量-静态变量-和类方法-静态方法" tabindex="-1"><a class="header-anchor" href="#类变量-静态变量-和类方法-静态方法" aria-hidden="true">#</a> 类变量（静态变量）和类方法（静态方法）</h1><h2 id="类变量" tabindex="-1"><a class="header-anchor" href="#类变量" aria-hidden="true">#</a> 类变量</h2><h3 id="类变量——-提出问题" tabindex="-1"><a class="header-anchor" href="#类变量——-提出问题" aria-hidden="true">#</a> 类变量—— 提出问题</h3><blockquote><p>有一群小孩在玩堆雪人,不时有新的小孩加入,请问如何知道现在共有多少人在玩?，编写程序解决。</p></blockquote><h4 id="传统方法解决" tabindex="-1"><a class="header-anchor" href="#传统方法解决" aria-hidden="true">#</a> 传统方法解决</h4><ol><li>在main方法中定义一个变量 count</li><li>当一个小孩加入游戏后 count++，最后个count 就记录有多少小孩玩游戏</li></ol><h3 id="static-存放问题-由于jdk版本不同-存放位置不同" tabindex="-1"><a class="header-anchor" href="#static-存放问题-由于jdk版本不同-存放位置不同" aria-hidden="true">#</a> static 存放问题（由于jdk版本不同，存放位置不同）</h3><blockquote><p>不管static 变量在哪里，共识</p><ul><li>(1) static 变量是同一个类所有对象共享</li><li>(2)static类变量，在类加载的时候就生成了</li></ul></blockquote><h3 id="什么是类变量" tabindex="-1"><a class="header-anchor" href="#什么是类变量" aria-hidden="true">#</a> 什么是类变量</h3><blockquote><p>类变量也叫<strong>静态变量</strong> / <strong>静态属性</strong>，是该类的所有<strong>对象共享的变量</strong>,任何一个该类的对象去访问它时,取到的都是<strong>相同的值</strong>,同样任何一个该类的对象去修改它时,修改的也是同一个变量。</p></blockquote><h3 id="如何定义类变量" tabindex="-1"><a class="header-anchor" href="#如何定义类变量" aria-hidden="true">#</a> 如何定义类变量</h3><blockquote><ul><li>访问修饰符 static 数据类型 变量名;[推荐]</li><li>static 访问修饰符 数据类型 变量名;</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">A</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">static</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> name </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> </span><span style="color:#98C379;">&quot;AAAA&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">static</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> totalNumber </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="如何访问类变量" tabindex="-1"><a class="header-anchor" href="#如何访问类变量" aria-hidden="true">#</a> 如何访问类变量</h3><blockquote><ul><li>类名.类变量名[推荐]</li><li>对象名.类变量名[静态变量的访问修饰符的访问权限和范围 和 普通属性是一样的]</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">ClassVariable</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">static</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">       </span><span style="color:#7F848E;font-style:italic;">/** 说明:类变量是随着类的加载而创建，所以即使没有创建对象实例也可以访问 */</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Child</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">count</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">Child</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">child</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Child</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">         </span><span style="color:#7F848E;font-style:italic;">/** 通过对象名.类变量名 */</span></span>
<span class="line"><span style="color:#ABB2BF;">         </span><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">child</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">count</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">Child</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * 定义一个变量 count ,是一个类变量(静态变量) static 静态</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * 该变量最大的特点就是会被Chid 类的所有的对象实例共享</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * */</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">static</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> count </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#61AFEF;"> getName</span><span style="color:#ABB2BF;">()</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> name;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">void</span><span style="color:#61AFEF;"> setName</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> name;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">void</span><span style="color:#61AFEF;"> join</span><span style="color:#ABB2BF;">()</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(name </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot; 加入了游戏&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="类变量使用注意事项和细节讨论" tabindex="-1"><a class="header-anchor" href="#类变量使用注意事项和细节讨论" aria-hidden="true">#</a> 类变量使用注意事项和细节讨论</h3><h4 id="_1-使用场景" tabindex="-1"><a class="header-anchor" href="#_1-使用场景" aria-hidden="true">#</a> 1.使用场景</h4><blockquote><p>当我们需要让某个类的所有对象都共享一个变量时，比如: 定义学生类，统计所有学生共交多少钱。Student (name,fee)</p></blockquote><h4 id="_2-类变量与实例变量-普通属性-区别" tabindex="-1"><a class="header-anchor" href="#_2-类变量与实例变量-普通属性-区别" aria-hidden="true">#</a> 2.类变量与实例变量 (普通属性) 区别</h4><blockquote><p>类变量是该类的所有对象共享的，而实例变量是每个对象独享的。</p></blockquote><h4 id="_3-实例变量不能通过-类名-美变量名-方式访问" tabindex="-1"><a class="header-anchor" href="#_3-实例变量不能通过-类名-美变量名-方式访问" aria-hidden="true">#</a> 3.实例变量不能通过 类名.美变量名 方式访问</h4><h4 id="_4-类变量加载" tabindex="-1"><a class="header-anchor" href="#_4-类变量加载" aria-hidden="true">#</a> 4.类变量加载</h4><blockquote><p>类变量是在类加载时就初始化了，也就是说，即使你没有创建对象，只要类加载了 就可以使用类变量了。[案例演示]</p></blockquote><h4 id="_5-类变量的生命周期是随类的加载开始-随着类消亡而销毁" tabindex="-1"><a class="header-anchor" href="#_5-类变量的生命周期是随类的加载开始-随着类消亡而销毁" aria-hidden="true">#</a> 5.类变量的生命周期是随类的加载开始，随着类消亡而销毁</h4><h2 id="类方法" tabindex="-1"><a class="header-anchor" href="#类方法" aria-hidden="true">#</a> 类方法</h2><h3 id="基本介绍" tabindex="-1"><a class="header-anchor" href="#基本介绍" aria-hidden="true">#</a> 基本介绍</h3><p>类方法也叫静态方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">语法：</span></span>
<span class="line"><span style="color:#E06C75;">访问修饰符 </span><span style="color:#C678DD;">static</span><span style="color:#E06C75;"> 数据返回类型 方法名(){ } 【推荐】</span></span>
<span class="line"><span style="color:#C678DD;">static</span><span style="color:#E06C75;"> 访问修饰符 数据返回类型 方法名(){ } </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类方法的调用" tabindex="-1"><a class="header-anchor" href="#类方法的调用" aria-hidden="true">#</a> 类方法的调用</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">类名</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">类方法名 或者 对象名</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">类方法名【前提是 满足访问修饰符的访问权限和范围】</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">B</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">static</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">void</span><span style="color:#61AFEF;"> printStart</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;打印星星&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">说明</p><ol><li>当方法使用了 static 修饰后，该方法就是静态方法</li><li>静态方法就可以访问静态属性/变量</li></ol></div><h3 id="类方法的经典使用场景" tabindex="-1"><a class="header-anchor" href="#类方法的经典使用场景" aria-hidden="true">#</a> 类方法的经典使用场景</h3><blockquote><p>当方法中不涉及到任何和对象相关的成员，则可以将方法设计成静态方法,提高开发效率 比如：工具类中的方法 <strong>utils</strong> <strong>Math</strong> 类、<strong>Arrays</strong> 类、<strong>Collections</strong> 集合类（ctrl + b 源码）</p></blockquote><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h3><p>在程序员实际开发，往往会将一些通用的方法，设计成静态方法，这样我们不需要创建对象就可以使用 了，比如打印一维数组， 冒泡排序，完成某个计算任务 等..[举例说明...]</p><div class="hint-container tip"><p class="hint-container-title">开发一个计算器类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">Cal</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">static</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">double</span><span style="color:#61AFEF;"> sum</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">n1</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">n2</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> n1 </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> n2;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h3><ul><li>类方法和普通方法都是随着类的加载而加载，将结构信息存储在方法区（类方法中无this的参数，普通方法中隐含着this的参数）</li><li>类方法可以通过类名调用，也可以通过对象名调用。</li><li>普通方法和对象有关，需要通过对象名调用，比如对象名.方法名(参数)，不能通过类名调用。[举例]</li><li>总结：静态方法只能访问静态成员，非静态方法可以访问非静态成员和静态成员，静态方法不能使用<strong>this</strong>， <strong>super</strong> 等关键字</li></ul>`,37),p=[o];function c(r,t){return a(),n("div",null,p)}const d=s(e,[["render",c],["__file","类变量和类方法.html.vue"]]);export{d as default};
