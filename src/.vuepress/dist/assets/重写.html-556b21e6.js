import{_ as a,X as i,Y as t,Z as r,$ as e,a2 as n,a3 as c}from"./framework-6cd8c18b.js";const d="/spoony-z/assets/5-cf101f7c.png",s={},o=e("h1",{id:"重写-覆盖-override",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#重写-覆盖-override","aria-hidden":"true"},"#"),n(" 重写/覆盖（override）")],-1),h=c('<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><p>简单的说:方法覆盖(重写)就是子类有一个方法，和父类的某个方法的名称、返回类型、参数一样,那么我们就说子类的这个方法覆盖了父类的那个方法</p><h2 id="注意事项和细节" tabindex="-1"><a class="header-anchor" href="#注意事项和细节" aria-hidden="true">#</a> 注意事项和细节</h2><div class="hint-container tip"><p class="hint-container-title">方法重写也叫方法覆盖，需要满足下面的条件</p><ol><li>子类的方法的参数,方法名称,要和父类方法的参数,方法名称完全一样。</li><li>子类方法的返回类型和父类方法返回类型一样，或者是父类返回类型的子类 比如 父类 返回类型是 object ,子类方法返回类型是 String</li><li>子类方法不能缩小父类方法的访问权限</li></ol></div><h2 id="重写与重载比较" tabindex="-1"><a class="header-anchor" href="#重写与重载比较" aria-hidden="true">#</a> 重写与重载比较</h2><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="练习" tabindex="-1"><a class="header-anchor" href="#练习" aria-hidden="true">#</a> 练习</h2><div class="hint-container tip"><p class="hint-container-title">暂无</p></div>',8);function l(_,f){return i(),t("div",null,[o,r(" more "),h])}const u=a(s,[["render",l],["__file","重写.html.vue"]]);export{u as default};
