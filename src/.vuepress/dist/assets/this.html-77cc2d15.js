const s=JSON.parse(`{"key":"v-549a9474","path":"/front-end/js/this.html","title":"正确认识this","lang":"zh-CN","frontmatter":{"description":"正确认识this JavaScript 中的this 在绝大多数情况下，函数的调用方式决定了 this 的值(运行时绑定)。this 不能在执行期间被赋值，并且在每次函数被 调用时 this 的值也可能会不同。 如何确认this的值 在非严格模式下，总是 指向一个对象， 在严格模式下可以是 任意值。 全局执行环境中指向全局对象 window (非严格模式、严格模式)/** 非严格模式 */ console.log(this); // window /** 严格模式 */ 'use strict' console.log(this); // window 函数内部，取决于函数被调用的方式 直接调用的this值 非严格模式： 全局对象(window) 严格模式： undefined 对象方法调用的this值 指向调用者（严格模，非严格模式） /** 1. 直接调用（非严格模式） */ function fun(){ console.log(this); // window } fun() /** 1. 直接调用（严格模式） */ function fun(){ 'use strict' console.log(this); // undefined } fun() /** 对象方法调用 （非严格模式）*/ const food = { name: \\"炒拉条\\", eat() { console.log(this); } } // this指向调用者 调用者为 foot 所以 这里的thi指向 food 对象 console.log(food.eat()); /** 对象方法调用 （严格模式）*/ const food = { name: \\"炒拉条\\", eat() { 'use strict' console.log(this); } } // this指向调用者 调用者为 foot 所以 这里的thi指向 food 对象 console.log(food.eat());","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/spoony-z/front-end/js/this.html"}],["meta",{"property":"og:site_name","content":"SOBER"}],["meta",{"property":"og:title","content":"正确认识this"}],["meta",{"property":"og:description","content":"正确认识this JavaScript 中的this 在绝大多数情况下，函数的调用方式决定了 this 的值(运行时绑定)。this 不能在执行期间被赋值，并且在每次函数被 调用时 this 的值也可能会不同。 如何确认this的值 在非严格模式下，总是 指向一个对象， 在严格模式下可以是 任意值。 全局执行环境中指向全局对象 window (非严格模式、严格模式)/** 非严格模式 */ console.log(this); // window /** 严格模式 */ 'use strict' console.log(this); // window 函数内部，取决于函数被调用的方式 直接调用的this值 非严格模式： 全局对象(window) 严格模式： undefined 对象方法调用的this值 指向调用者（严格模，非严格模式） /** 1. 直接调用（非严格模式） */ function fun(){ console.log(this); // window } fun() /** 1. 直接调用（严格模式） */ function fun(){ 'use strict' console.log(this); // undefined } fun() /** 对象方法调用 （非严格模式）*/ const food = { name: \\"炒拉条\\", eat() { console.log(this); } } // this指向调用者 调用者为 foot 所以 这里的thi指向 food 对象 console.log(food.eat()); /** 对象方法调用 （严格模式）*/ const food = { name: \\"炒拉条\\", eat() { 'use strict' console.log(this); } } // this指向调用者 调用者为 foot 所以 这里的thi指向 food 对象 console.log(food.eat());"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-17T17:23:53.000Z"}],["meta",{"property":"article:author","content":"SOBER"}],["meta",{"property":"article:modified_time","content":"2023-10-17T17:23:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"正确认识this\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-10-17T17:23:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"SOBER\\",\\"url\\":\\"https://github.com/spoony-Z\\"}]}"]]},"headers":[{"level":2,"title":"JavaScript 中的this","slug":"javascript-中的this","link":"#javascript-中的this","children":[{"level":3,"title":"如何确认this的值","slug":"如何确认this的值","link":"#如何确认this的值","children":[]},{"level":3,"title":"如何指定this的值","slug":"如何指定this的值","link":"#如何指定this的值","children":[]},{"level":3,"title":"手写call、apply 、 bind:","slug":"手写call、apply-、-bind","link":"#手写call、apply-、-bind","children":[]}]}],"git":{"createdTime":1697563433000,"updatedTime":1697563433000,"contributors":[{"name":"杨胜军","email":"shenjun_y@yeah.net","commits":1}]},"readingTime":{"minutes":1.31,"words":392},"filePathRelative":"front-end/js/this.md","localizedDate":"2023年10月18日","excerpt":"<h1> 正确认识this</h1>\\n<h2> JavaScript 中的this</h2>\\n<blockquote>\\n<p>在绝大多数情况下，函数的调用方式决定了 this 的值(运行时绑定)。this 不能在执行期间被赋值，并且在每次函数被\\n调用时 this 的值也可能会不同。</p>\\n</blockquote>\\n<h3> 如何确认this的值</h3>\\n<blockquote>\\n<p>在非严格模式下，总是 <strong>指向一个对象，</strong> 在严格模式下可以是 <strong>任意值。</strong></p>\\n</blockquote>\\n<ol>\\n<li>全局执行环境中指向全局对象 <strong>window</strong> (非严格模式、严格模式)<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"shiki one-dark-pro\\" style=\\"background-color: #282c34\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">/** 非严格模式 */</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">this</span><span style=\\"color: #ABB2BF\\">); </span><span style=\\"color: #7F848E; font-style: italic\\">// window</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">/** 严格模式 */</span></span>\\n<span class=\\"line\\"><span style=\\"color: #98C379\\">'use strict'</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">this</span><span style=\\"color: #ABB2BF\\">); </span><span style=\\"color: #7F848E; font-style: italic\\">// window</span></span>\\n<span class=\\"line\\"></span></code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>函数内部，取决于函数被调用的方式\\n<ol>\\n<li>直接调用的this值\\n<ul>\\n<li><strong>非严格模式：</strong> 全局对象(window)</li>\\n<li><strong>严格模式：</strong> undefined</li>\\n</ul>\\n</li>\\n<li>对象方法调用的this值\\n<ul>\\n<li>指向调用者（严格模，非严格模式）</li>\\n</ul>\\n</li>\\n</ol>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"shiki one-dark-pro\\" style=\\"background-color: #282c34\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">/** 1. 直接调用（非严格模式） */</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">function</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">fun</span><span style=\\"color: #ABB2BF\\">(){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">this</span><span style=\\"color: #ABB2BF\\">); </span><span style=\\"color: #7F848E; font-style: italic\\">// window</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #61AFEF\\">fun</span><span style=\\"color: #ABB2BF\\">()</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">/** 1. 直接调用（严格模式） */</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">function</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">fun</span><span style=\\"color: #ABB2BF\\">(){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #98C379\\">'use strict'</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">this</span><span style=\\"color: #ABB2BF\\">); </span><span style=\\"color: #7F848E; font-style: italic\\">// undefined</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #61AFEF\\">fun</span><span style=\\"color: #ABB2BF\\">()</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">/** 对象方法调用 （非严格模式）*/</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">food</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E06C75\\">name</span><span style=\\"color: #ABB2BF\\">: </span><span style=\\"color: #98C379\\">\\"炒拉条\\"</span><span style=\\"color: #ABB2BF\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">eat</span><span style=\\"color: #ABB2BF\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">this</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">// this指向调用者 调用者为 foot 所以 这里的thi指向 food 对象</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">food</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">eat</span><span style=\\"color: #ABB2BF\\">()); </span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">/** 对象方法调用 （严格模式）*/</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">food</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E06C75\\">name</span><span style=\\"color: #ABB2BF\\">: </span><span style=\\"color: #98C379\\">\\"炒拉条\\"</span><span style=\\"color: #ABB2BF\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">eat</span><span style=\\"color: #ABB2BF\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #98C379\\">'use strict'</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">this</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">// this指向调用者 调用者为 foot 所以 这里的thi指向 food 对象</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">food</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">eat</span><span style=\\"color: #ABB2BF\\">()); </span></span>\\n<span class=\\"line\\"></span></code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ol>","autoDesc":true}`);export{s as data};
