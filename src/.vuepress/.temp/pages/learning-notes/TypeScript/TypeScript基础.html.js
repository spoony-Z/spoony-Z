export const data = JSON.parse("{\"key\":\"v-36799354\",\"path\":\"/learning-notes/TypeScript/TypeScript%E5%9F%BA%E7%A1%80.html\",\"title\":\"TypeScript 基础\",\"lang\":\"zh-CN\",\"frontmatter\":{\"description\":\"TypeScript 基础 TypeScript 介绍 TypeScript为什么要为JS添加类型支持? 背景： JS的类型系统存在“先天缺陷”，JS代码中绝大部分错误都是类型错误(UncaughtTypeError)。 问题： 增加了找Bug、改Bug的时间，严重影响开发效率 从编程语言的动静来区分，TypeScript属于静态类型的编程语言，JS属于动态类型的编程语言。 静态类型： 编译期做类型检查;动态类型:执行期做类型检查。 编译和执行顺序： 1. 编译 2. 执行 对于JS来说： 需要等到代码真正去执行的时候才能发现错误(晚)，对于 TS 来说:在代码编译的时候 (代码执行前)就可以发现错误 (早)。并且，配合VSCode 等开发工具，T5 可以提前到在编写代码的同时就发现代码中的错误，减少找 Bug、改 Bug 时间。\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://mister-hope.github.iolearning-notes/TypeScript/TypeScript%E5%9F%BA%E7%A1%80.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"SOBER\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"TypeScript 基础\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"TypeScript 基础 TypeScript 介绍 TypeScript为什么要为JS添加类型支持? 背景： JS的类型系统存在“先天缺陷”，JS代码中绝大部分错误都是类型错误(UncaughtTypeError)。 问题： 增加了找Bug、改Bug的时间，严重影响开发效率 从编程语言的动静来区分，TypeScript属于静态类型的编程语言，JS属于动态类型的编程语言。 静态类型： 编译期做类型检查;动态类型:执行期做类型检查。 编译和执行顺序： 1. 编译 2. 执行 对于JS来说： 需要等到代码真正去执行的时候才能发现错误(晚)，对于 TS 来说:在代码编译的时候 (代码执行前)就可以发现错误 (早)。并且，配合VSCode 等开发工具，T5 可以提前到在编写代码的同时就发现代码中的错误，减少找 Bug、改 Bug 时间。\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:image\",\"content\":\"https://mister-hope.github.io\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-04-16T09:02:06.000Z\"}],[\"meta\",{\"name\":\"twitter:card\",\"content\":\"summary_large_image\"}],[\"meta\",{\"name\":\"twitter:image:alt\",\"content\":\"TypeScript 基础\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"SOBER\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-04-16T09:02:06.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"TypeScript 基础\\\",\\\"image\\\":[\\\"https://mister-hope.github.io\\\"],\\\"dateModified\\\":\\\"2023-04-16T09:02:06.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"SOBER\\\",\\\"url\\\":\\\"https://github.com/spoony-Z\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"TypeScript 介绍\",\"slug\":\"typescript-介绍\",\"link\":\"#typescript-介绍\",\"children\":[{\"level\":3,\"title\":\"TypeScript为什么要为JS添加类型支持?\",\"slug\":\"typescript为什么要为js添加类型支持\",\"link\":\"#typescript为什么要为js添加类型支持\",\"children\":[]},{\"level\":3,\"title\":\"TypeScript相比JS的优势\",\"slug\":\"typescript相比js的优势\",\"link\":\"#typescript相比js的优势\",\"children\":[]}]},{\"level\":2,\"title\":\"TypeScript初体验\",\"slug\":\"typescript初体验\",\"link\":\"#typescript初体验\",\"children\":[{\"level\":3,\"title\":\"安装编译TS的工具包\",\"slug\":\"安装编译ts的工具包\",\"link\":\"#安装编译ts的工具包\",\"children\":[]},{\"level\":3,\"title\":\"编译并运行TS代码\",\"slug\":\"编译并运行ts代码\",\"link\":\"#编译并运行ts代码\",\"children\":[]},{\"level\":3,\"title\":\"简化运行TS的步骤\",\"slug\":\"简化运行ts的步骤\",\"link\":\"#简化运行ts的步骤\",\"children\":[]}]},{\"level\":2,\"title\":\"TypeScript 常用类型\",\"slug\":\"typescript-常用类型\",\"link\":\"#typescript-常用类型\",\"children\":[{\"level\":3,\"title\":\"概述\",\"slug\":\"概述\",\"link\":\"#概述\",\"children\":[]},{\"level\":3,\"title\":\"类型注解\",\"slug\":\"类型注解\",\"link\":\"#类型注解\",\"children\":[]}]}],\"git\":{\"createdTime\":1681635726000,\"updatedTime\":1681635726000,\"contributors\":[{\"name\":\"杨胜军\",\"email\":\"shenjun_y@yeah.net\",\"commits\":1}]},\"readingTime\":{\"minutes\":2.9,\"words\":870},\"filePathRelative\":\"learning-notes/TypeScript/TypeScript基础.md\",\"localizedDate\":\"2023年4月16日\",\"excerpt\":\"<h1> TypeScript 基础</h1>\\n<h2> TypeScript 介绍</h2>\\n<h3> TypeScript为什么要为JS添加类型支持?</h3>\\n<ol>\\n<li><strong>背景：</strong> JS的类型系统存在“先天缺陷”，JS代码中绝大部分错误都是类型错误(UncaughtTypeError)。</li>\\n<li><strong>问题：</strong> 增加了找Bug、改Bug的时间，严重影响开发效率</li>\\n<li>从编程语言的动静来区分，TypeScript属于静态类型的编程语言，JS属于动态类型的编程语言。</li>\\n<li><strong>静态类型：</strong> 编译期做类型检查;动态类型:执行期做类型检查。</li>\\n<li><strong>编译和执行顺序：</strong> 1. 编译 2. 执行</li>\\n<li><strong>对于JS来说：</strong> 需要等到代码真正去执行的时候才能发现错误(晚)，对于 TS 来说:在代码编译的时候 (代码执行前)就可以发现错误 (早)。并且，配合VSCode 等开发工具，T5 可以提前到在编写代码的同时就发现代码中的错误，减少找 Bug、改 Bug 时间。</li>\\n</ol>\",\"autoDesc\":true}")
