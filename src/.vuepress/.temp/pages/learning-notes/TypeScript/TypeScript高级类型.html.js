export const data = JSON.parse("{\"key\":\"v-15f3a468\",\"path\":\"/learning-notes/TypeScript/TypeScript%E9%AB%98%E7%BA%A7%E7%B1%BB%E5%9E%8B.html\",\"title\":\"TypeScript高级类型\",\"lang\":\"zh-CN\",\"frontmatter\":{\"order\":4,\"description\":\"TypeScript高级类型 一、class 类 1. 介绍 Typescript 全面支持 ES2015 中引入的 class 关键字，并为其添加了类型注解和其他语法(比如，可见性修饰符等) /** * 基本使用 * 声明成员age，类型为number (没有初始值) * 声明成员 gender，并设置初始值，此时，可省略类型注解 (TS类型推论为 string 类型) **/ class Person { age: number gender = \\\"男\\\" } /** 此时 p 的类型为 Person */ const p = new Person();\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://mister-hope.github.io/spoony-z/learning-notes/TypeScript/TypeScript%E9%AB%98%E7%BA%A7%E7%B1%BB%E5%9E%8B.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"SOBER\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"TypeScript高级类型\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"TypeScript高级类型 一、class 类 1. 介绍 Typescript 全面支持 ES2015 中引入的 class 关键字，并为其添加了类型注解和其他语法(比如，可见性修饰符等) /** * 基本使用 * 声明成员age，类型为number (没有初始值) * 声明成员 gender，并设置初始值，此时，可省略类型注解 (TS类型推论为 string 类型) **/ class Person { age: number gender = \\\"男\\\" } /** 此时 p 的类型为 Person */ const p = new Person();\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-04-24T17:54:29.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"SOBER\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-04-24T17:54:29.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"TypeScript高级类型\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":\\\"2023-04-24T17:54:29.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"SOBER\\\",\\\"url\\\":\\\"https://github.com/spoony-Z\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"一、class 类\",\"slug\":\"一、class-类\",\"link\":\"#一、class-类\",\"children\":[{\"level\":3,\"title\":\"1. 介绍\",\"slug\":\"_1-介绍\",\"link\":\"#_1-介绍\",\"children\":[]}]},{\"level\":2,\"title\":\"二、构造函数\",\"slug\":\"二、构造函数\",\"link\":\"#二、构造函数\",\"children\":[]},{\"level\":2,\"title\":\"三、实例方法\",\"slug\":\"三、实例方法\",\"link\":\"#三、实例方法\",\"children\":[]},{\"level\":2,\"title\":\"四、class 的继承\",\"slug\":\"四、class-的继承\",\"link\":\"#四、class-的继承\",\"children\":[{\"level\":3,\"title\":\"1. 使用 extends 继承\",\"slug\":\"_1-使用-extends-继承\",\"link\":\"#_1-使用-extends-继承\",\"children\":[]},{\"level\":3,\"title\":\"2. 使用 implements 继承\",\"slug\":\"_2-使用-implements-继承\",\"link\":\"#_2-使用-implements-继承\",\"children\":[]}]},{\"level\":2,\"title\":\"五、class 的修饰符\",\"slug\":\"五、class-的修饰符\",\"link\":\"#五、class-的修饰符\",\"children\":[{\"level\":3,\"title\":\"1. public(公有的)\",\"slug\":\"_1-public-公有的\",\"link\":\"#_1-public-公有的\",\"children\":[]},{\"level\":3,\"title\":\"2. protected\",\"slug\":\"_2-protected\",\"link\":\"#_2-protected\",\"children\":[]},{\"level\":3,\"title\":\"3. private\",\"slug\":\"_3-private\",\"link\":\"#_3-private\",\"children\":[]},{\"level\":3,\"title\":\"4. readonly(只读)\",\"slug\":\"_4-readonly-只读\",\"link\":\"#_4-readonly-只读\",\"children\":[]}]},{\"level\":2,\"title\":\"六、类型兼容性\",\"slug\":\"六、类型兼容性\",\"link\":\"#六、类型兼容性\",\"children\":[]},{\"level\":2,\"title\":\"七、接口之间的兼容性\",\"slug\":\"七、接口之间的兼容性\",\"link\":\"#七、接口之间的兼容性\",\"children\":[]},{\"level\":2,\"title\":\"八、函数之间的兼容性\",\"slug\":\"八、函数之间的兼容性\",\"link\":\"#八、函数之间的兼容性\",\"children\":[{\"level\":3,\"title\":\"1. 参数的个数兼容\",\"slug\":\"_1-参数的个数兼容\",\"link\":\"#_1-参数的个数兼容\",\"children\":[]},{\"level\":3,\"title\":\"2. 参数的参数类型\",\"slug\":\"_2-参数的参数类型\",\"link\":\"#_2-参数的参数类型\",\"children\":[]},{\"level\":3,\"title\":\"3. 参数的返回值类型\",\"slug\":\"_3-参数的返回值类型\",\"link\":\"#_3-参数的返回值类型\",\"children\":[]}]},{\"level\":2,\"title\":\"九、交叉类型（&）\",\"slug\":\"九、交叉类型\",\"link\":\"#九、交叉类型\",\"children\":[]},{\"level\":2,\"title\":\"十、交叉类型（&）和接口继承（extends）的对比\",\"slug\":\"十、交叉类型-和接口继承-extends-的对比\",\"link\":\"#十、交叉类型-和接口继承-extends-的对比\",\"children\":[]},{\"level\":2,\"title\":\"十一、泛型\",\"slug\":\"十一、泛型\",\"link\":\"#十一、泛型\",\"children\":[{\"level\":3,\"title\":\"1. 介绍\",\"slug\":\"_1-介绍-1\",\"link\":\"#_1-介绍-1\",\"children\":[]},{\"level\":3,\"title\":\"2. 基本使用\",\"slug\":\"_2-基本使用\",\"link\":\"#_2-基本使用\",\"children\":[]},{\"level\":3,\"title\":\"3. 代码演示\",\"slug\":\"_3-代码演示\",\"link\":\"#_3-代码演示\",\"children\":[]},{\"level\":3,\"title\":\"4. 简化调用泛型函数\",\"slug\":\"_4-简化调用泛型函数\",\"link\":\"#_4-简化调用泛型函数\",\"children\":[]},{\"level\":3,\"title\":\"5. 泛型约束\",\"slug\":\"_5-泛型约束\",\"link\":\"#_5-泛型约束\",\"children\":[]},{\"level\":3,\"title\":\"泛型接口\",\"slug\":\"泛型接口\",\"link\":\"#泛型接口\",\"children\":[]}]}],\"git\":{\"createdTime\":1681869050000,\"updatedTime\":1682358869000,\"contributors\":[{\"name\":\"杨胜军\",\"email\":\"shenjun_y@yeah.net\",\"commits\":5}]},\"readingTime\":{\"minutes\":12.28,\"words\":3685},\"filePathRelative\":\"learning-notes/TypeScript/TypeScript高级类型.md\",\"localizedDate\":\"2023年4月19日\",\"excerpt\":\"<h1> TypeScript高级类型</h1>\\n<h2> 一、class 类</h2>\\n<h3> 1. 介绍</h3>\\n<p><strong>Typescript</strong> 全面支持 ES2015 中引入的 <strong>class</strong> 关键字，并为其添加了类型注解和其他语法(比如，可见性修饰符等)</p>\\n<div class=\\\"language-typescript line-numbers-mode\\\" data-ext=\\\"ts\\\"><pre class=\\\"shiki one-dark-pro\\\" style=\\\"background-color: #282c34\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #7F848E; font-style: italic\\\">/** </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #7F848E; font-style: italic\\\"> * 基本使用 </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #7F848E; font-style: italic\\\"> * 声明成员age，类型为number (没有初始值)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #7F848E; font-style: italic\\\"> * 声明成员 gender，并设置初始值，此时，可省略类型注解 (TS类型推论为 string 类型)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #7F848E; font-style: italic\\\"> **/</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #C678DD\\\">class</span><span style=\\\"color: #ABB2BF\\\"> </span><span style=\\\"color: #E5C07B\\\">Person</span><span style=\\\"color: #ABB2BF\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #ABB2BF\\\">    </span><span style=\\\"color: #E06C75\\\">age</span><span style=\\\"color: #ABB2BF\\\">: </span><span style=\\\"color: #E5C07B\\\">number</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #ABB2BF\\\">    </span><span style=\\\"color: #E06C75\\\">gender</span><span style=\\\"color: #ABB2BF\\\"> </span><span style=\\\"color: #56B6C2\\\">=</span><span style=\\\"color: #ABB2BF\\\"> </span><span style=\\\"color: #98C379\\\">\\\"男\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #ABB2BF\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #7F848E; font-style: italic\\\">/** 此时 p 的类型为 Person */</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #C678DD\\\">const</span><span style=\\\"color: #ABB2BF\\\"> </span><span style=\\\"color: #E5C07B\\\">p</span><span style=\\\"color: #ABB2BF\\\"> </span><span style=\\\"color: #56B6C2\\\">=</span><span style=\\\"color: #ABB2BF\\\"> </span><span style=\\\"color: #C678DD\\\">new</span><span style=\\\"color: #ABB2BF\\\"> </span><span style=\\\"color: #61AFEF\\\">Person</span><span style=\\\"color: #ABB2BF\\\">();</span></span>\\n<span class=\\\"line\\\"></span></code></pre><div class=\\\"line-numbers\\\" aria-hidden=\\\"true\\\"><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div></div></div>\",\"autoDesc\":true}")
