const data = JSON.parse('{"key":"v-15f3a468","path":"/learning-notes/TypeScript/TypeScript%E9%AB%98%E7%BA%A7%E7%B1%BB%E5%9E%8B.html","title":"TypeScript高级类型","lang":"zh-CN","frontmatter":{"order":4,"description":"TypeScript高级类型 class 类 介绍 Typescript 全面支持 ES2015 中引入的 class 关键字，并为其添加了类型注解和其他语法(比如，可见性修饰符等) /** * 基本使用 * 声明成员age，类型为number (没有初始值) * 声明成员 gender，并设置初始值，此时，可省略类型注解 (TS类型推论为 string 类型) **/ class Person { age: number gender = \\"男\\" } /** 此时 p 的类型为 Person */ const p = new Person();","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/spoony-z/learning-notes/TypeScript/TypeScript%E9%AB%98%E7%BA%A7%E7%B1%BB%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"SOBER"}],["meta",{"property":"og:title","content":"TypeScript高级类型"}],["meta",{"property":"og:description","content":"TypeScript高级类型 class 类 介绍 Typescript 全面支持 ES2015 中引入的 class 关键字，并为其添加了类型注解和其他语法(比如，可见性修饰符等) /** * 基本使用 * 声明成员age，类型为number (没有初始值) * 声明成员 gender，并设置初始值，此时，可省略类型注解 (TS类型推论为 string 类型) **/ class Person { age: number gender = \\"男\\" } /** 此时 p 的类型为 Person */ const p = new Person();"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-19T01:50:50.000Z"}],["meta",{"property":"article:author","content":"SOBER"}],["meta",{"property":"article:modified_time","content":"2023-04-19T01:50:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"TypeScript高级类型\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-04-19T01:50:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"SOBER\\",\\"url\\":\\"https://github.com/spoony-Z\\"}]}"]]},"headers":[{"level":2,"title":"class 类","slug":"class-类","link":"#class-类","children":[{"level":3,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":3,"title":"构造函数","slug":"构造函数","link":"#构造函数","children":[]},{"level":3,"title":"实例方法","slug":"实例方法","link":"#实例方法","children":[]},{"level":3,"title":"class 的继承","slug":"class-的继承","link":"#class-的继承","children":[]}]}],"git":{"createdTime":1681869050000,"updatedTime":1681869050000,"contributors":[{"name":"杨胜军","email":"shenjun_y@yeah.net","commits":1}]},"readingTime":{"minutes":1.15,"words":346},"filePathRelative":"learning-notes/TypeScript/TypeScript高级类型.md","localizedDate":"2023年4月19日","excerpt":"<h1> TypeScript高级类型</h1>\\n<h2> class 类</h2>\\n<h3> 介绍</h3>\\n<p><strong>Typescript</strong> 全面支持 ES2015 中引入的 <strong>class</strong> 关键字，并为其添加了类型注解和其他语法(比如，可见性修饰符等)</p>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"shiki one-dark-pro\\" style=\\"background-color: #282c34\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">/** </span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\"> * 基本使用 </span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\"> * 声明成员age，类型为number (没有初始值)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\"> * 声明成员 gender，并设置初始值，此时，可省略类型注解 (TS类型推论为 string 类型)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\"> **/</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">class</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">Person</span><span style=\\"color: #ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E06C75\\">age</span><span style=\\"color: #ABB2BF\\">: </span><span style=\\"color: #E5C07B\\">number</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E06C75\\">gender</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"男\\"</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #7F848E; font-style: italic\\">/** 此时 p 的类型为 Person */</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">p</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">new</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">Person</span><span style=\\"color: #ABB2BF\\">();</span></span>\\n<span class=\\"line\\"></span></code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');
export {
  data
};
